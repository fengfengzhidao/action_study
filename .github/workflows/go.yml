name: Go Build, Dockerize and Release

on:
  push:
    tags:
      - "v*"  # 仅 v 开头的 tag 触发

env:
  DOCKER_IMAGE_NAME: myapp  # Docker镜像名称
  SSH_HOST:  ${{ secrets.SSH_HOST }} # 云服务器地址
  SSH_PORT: 22  # SSH端口
  SSH_USER: root
  DEPLOY_DIR: /opt/myapp  # 云服务器部署目录

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    strategy:
      matrix:
        platform:
          - { os: linux, goos: linux, goarch: amd64, suffix: "" }
          - { os: linux, goos: linux, goarch: arm64, suffix: "-arm64" }
          - { os: windows, goos: windows, goarch: amd64, suffix: ".exe" }
          - { os: macos, goos: darwin, goarch: amd64, suffix: "-darwin" }
          - { os: macos, goos: darwin, goarch: arm64, suffix: "-darwin-arm64" }
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'

      - name: Build
        env:
          GOOS: ${{ matrix.platform.goos }}
          GOARCH: ${{ matrix.platform.goarch }}
          CGO_ENABLED: 0  # 静态编译
        run: |
          output_name="main-${{ matrix.platform.goos }}-${{ matrix.platform.goarch }}${{ matrix.platform.suffix }}"
          go build -v -o $output_name .
          echo "BINARY_NAME=$output_name" >> $GITHUB_ENV

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.BINARY_NAME }}
          path: ${{ env.BINARY_NAME }}

  docker:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: Download Linux Binary
        uses: actions/download-artifact@v4
        with:
          name: main-linux-amd64
          path: docker-build/

      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      - name: Build Docker Image
        run: |
          cp Dockerfile docker-build/
          cd docker-build
          docker build -t ${{ env.DOCKER_IMAGE_NAME }}:${{ github.ref_name }} .
          docker save ${{ env.DOCKER_IMAGE_NAME }}:${{ github.ref_name }} > ${{ env.DOCKER_IMAGE_NAME }}.tar
          gzip ${{ env.DOCKER_IMAGE_NAME }}.tar
          echo "DOCKER_TAR=${{ env.DOCKER_IMAGE_NAME }}.tar.gz" >> $GITHUB_ENV

      - name: Upload Docker Image
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: docker-build/${{ env.DOCKER_TAR }}

  release:
    needs: [build, docker]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download Binaries
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          merge-multiple: true

      - name: Download Docker Image
        uses: actions/download-artifact@v4
        with:
          name: docker-image
          path: artifacts

      - name: Verify Files
        run: ls -R artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/main-darwin-amd64-darwin
            artifacts/main-darwin-arm64-darwin-arm64
            artifacts/main-linux-amd64
            artifacts/main-linux-arm64-arm64
            artifacts/main-windows-amd64.exe
            artifacts/${{ env.DOCKER_IMAGE_NAME }}.tar.gz
          tag_name: ${{ github.ref_name }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy:
    needs: docker
    runs-on: ubuntu-latest
    steps:
      - name: Download Docker Image
        uses: actions/download-artifact@v4
        with:
          name: docker-image
          path: artifacts

      - name: Install sshpass
        run: sudo apt-get install -y sshpass

      - name: Deploy via Password
        env:
          SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}  # 密码存储在GitHub Secrets
        run: |
          sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no \
            ${{ env.SSH_USER }}@${{ secrets.SSH_HOST }} \
            "echo 'Deployment commands here'"

      - name: Deploy to Cloud Server
        env:
          SSH_EXTRA_OPTS: -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null
        run: |
          # 1. 上传Docker镜像到服务器
          sshpass -p ${{ secrets.SSH_PASSWORD }}  scp -P ${{ env.SSH_PORT }} ${{ env.SSH_EXTRA_OPTS }} \
            artifacts/${{ env.DOCKER_IMAGE_NAME }}.tar.gz \
            ${{ env.SSH_USER }}@${{ env.SSH_HOST }}:${{ env.DEPLOY_DIR }}
          
          echo "镜像上传成功"
          
          # 2. 执行远程部署命令
          sshpass -p ${{ secrets.SSH_PASSWORD }}  ssh -p ${{ env.SSH_PORT }} ${{ env.SSH_EXTRA_OPTS }} \
            ${{ env.SSH_USER }}@${{ env.SSH_HOST }} \
            "set -e && \
            cd ${{ env.DEPLOY_DIR }} && \
            docker load -i ${{ env.DOCKER_IMAGE_NAME }}.tar.gz \
            docker stop \$(docker ps -q --filter name=${{ env.DOCKER_IMAGE_NAME }}) || true && \
            docker rm \$(docker ps -aq --filter name=${{ env.DOCKER_IMAGE_NAME }}) || true && \
            docker run -d \
              --name ${{ env.DOCKER_IMAGE_NAME }} \
              -p 8000:8000 \
              --restart unless-stopped \
              ${{ env.DOCKER_IMAGE_NAME }}:${{ github.ref_name }}"